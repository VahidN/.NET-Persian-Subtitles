1
00:00:00,310 --> 00:00:03,445
‫زمانیکه یک برنامه متداول رومیزی
‫ویندوز اجرا می‌شود

2
00:00:03,707 --> 00:00:07,906
‫این برنامه در یک پروسه جدید ویندوز
‫تا زمانیکه کاربر، برنامه را خاتمه دهد،
‫اجرا خواهد شد.

3
00:00:08,147 --> 00:00:10,756
‫و کاربر آنچنان انتخابی را در این
‫زمینه نمی‌تواند انجام دهد.

4
00:00:10,828 --> 00:00:17,196
‫یا برنامه به طور داوطلبانه ای خودش
‫را خاتمه می‌دهد، یا اینکه ویندوز
‫اینکار را خواهد کرد.

5
00:00:17,543 --> 00:00:22,709
‫بنابراین برنامه‌ها همینطور در پس زمینه
‫در حال اجرا بوده، حافظه و منابع
‫را مصرف خواهند کرد تا زمانیکه کاربر
‫آن‌ها را خاتمه دهد.

6
00:00:22,835 --> 00:00:26,540
‫این مورد در یک سیستم رومیزی آنچنان
‫مساله مهمی نیست.

7
00:00:26,675 --> 00:00:28,182
‫زیرا این نوع سیستم‌ها حافظه زیادی
‫را نیز به همراه دارند.

8
00:00:28,545 --> 00:00:33,301
‫به علاوه نوار وظیفه ویندوز امکان مشخص
‫سازی تعداد برنامه هایی که هم اکنون
‫در حال اجرا هستند را فراهم می‌‫کند.

9
00:00:33,563 --> 00:00:38,170
‫بنابراین اگر مصرف حافظه بالایی وجود دارد،
‫لیست طولانی نیز در اینجا قابل مشاهده
‫خواهد بود.

10
00:00:38,582 --> 00:00:41,935
‫اما در وسایل لمسی، مسایل متفاوت هستند.

11
00:00:42,086 --> 00:00:45,654
‫تبلت‌ها نسبت به سیستم‌های دسکتاپ
‫میزان حافظه بسیار کمتری دارند.

12
00:00:45,998 --> 00:00:48,135
‫بنابراین دیر یا زود این حافظه مصرف
‫خواهد شد.

13
00:00:48,243 --> 00:00:51,481
‫و از آنجائیکه برنامه‌های مترو، تمام
‫صفحه اجرا می‌شوند

14
00:00:51,717 --> 00:00:57,569
‫دیگر امکان مشاهده ساده لیستی از
‫برنامه‫های در حال اجرای در پس زمینه
‫را نخواهیم داشت.

15
00:00:57,691 --> 00:01:01,497
‫در ویندوز 8، سیستم و برنامه‌های ‫
‫رومیزی هنوز مهیا هستند.

16
00:01:01,642 --> 00:01:05,249
‫و برنامه‌های دنیای دسکتاپ نیز به
‫همین منوال به زندگی خود
‫ادامه خواهند داد.

17
00:01:05,340 --> 00:01:07,707
‫اما مترو شیوهٔ دیگری را برگزیده ‫است.

18
00:01:07,900 --> 00:01:12,015
‫این برنامه‌ها تا در معرض دید
‫کاربر قرار نگیرند، اجرا نخواهد شد.

19
00:01:12,237 --> 00:01:15,517
‫این شیوه سه مزیت مهم را به
‫همراه دارد

20
00:01:15,671 --> 00:01:20,314
‫به این ترتیب اگر چندین برنامهٔ درحال
‫اجرا داشته باشیم، آنچنان حافظه ای را
‫مصرف نخواهند کرد.

21
00:01:20,415 --> 00:01:25,289
‫همچنین دیگر کاربر نیاز نخواهد داشت تا
‫برنامه‌های پس زمینه را دستی خاتمه ‫دهد.

22
00:01:25,678 --> 00:01:35,381
‫به علاوه برنامه‌های پس زمینه دیگر
‫نمی توانند از دیسک سخت یا CPU
‫استفاده کنند و بر روی کارآیی برنامه‫ای
‫که هم اکنون در معرض دید
‫کاربر است، اخلال ایجاد نمایند.

23
00:01:35,562 --> 00:01:40,599
‫هرچند این تغییرات باید حداقل سردرگمی
‫را برای ‫کاربر داشته باشد.

24
00:01:40,926 --> 00:01:45,616
‫اگر به برنامه مجددا مراجعه کردند،
‫باید اینطور وانمود کنید که ‫
‫چیزی اتفاق نیفتاده است.

25
00:01:45,640 --> 00:01:48,288
‫باید طوری به نظر برسد که برنامه
‫شما در این مدت در حال اجرا بوده است.

26
00:01:48,433 --> 00:01:55,346
‫بنابراین به عنوان یک برنامه نویس، باید
‫کار بیشتری را انجام دهیم تا کیفیت
‫زندگی کاربران را بهبود بخشیم. 
‫این را تصور کنید.

27
00:01:56,348 --> 00:01:59,124
‫بنابراین با یک مدیریت حالت نسبتا ساده
‫سروکار خواهیم داشت.

28
00:01:59,263 --> 00:02:02,806
‫در ابتدا هنوز برنامه شما توسط کاربر
‫اجرا نشده است.

29
00:02:03,163 --> 00:02:08,448
‫زمانیکه کاربر سعی در اجرای آن می‌‫کند
‫مانند ضربه زدن بر روی آیکون
‫آن در صفحه آغازین ویندوز

30
00:02:08,629 --> 00:02:14,471
‫ویندوز یک پروسه جدید را به آن
‫اختصاص داده و برنامه مانند سایر
‫برنامه‌های موجود شروع به کار خواهد ‫کرد.

31
00:02:14,734 --> 00:02:20,054
‫کدهای StartUp برنامه شما رابط کاربری را
‫آغاز کرده و تمام صفحه را پر ‫خواهد کرد.

32
00:02:20,159 --> 00:02:24,014
‫اکنون برنامه شما فعال شده و کاربر
‫می تواند به تعامل با آن بپردازد.

33
00:02:24,191 --> 00:02:30,419
‫در این بین پس از مدت زمانی
‫شاید کاربر بخواهد کار دیگری
‫را انجام دهد

34
00:02:30,480 --> 00:02:36,059
‫برای مثال مراجعه به صفحه آغازین ویندوز
‫یا سوئیچ به برنامه ای دیگر

35
00:02:36,372 --> 00:02:40,630
‫در این حالت برنامه شما برای مدت
‫زمان کوتاهی به کار خود ادامه خواهد ‫داد.

36
00:02:40,781 --> 00:02:42,668
‫هرچند دیگر در معرض دید قرار ندارد.

37
00:02:42,843 --> 00:02:49,401
‫ویندوز حدود 5 ثانیه صبر می‌کند
‫تا مطمئن شود که آیا تصمیم کاربر
‫جهت مراجعه مجدد به برنامه تغییر
‫کرده است یا خیر.

38
00:02:49,457 --> 00:02:54,492
‫و اگر پس از 5 ثانیه، کاربر
‫به برنامه مراجعه نکند، برنامه را
‫معلق خواهد کرد.

39
00:02:54,719 --> 00:03:00,705
‫در حالت تعلیق، برنامه دیگر قادر به
‫اجرا نخواهد بود زیرا دیگر CPU Time
‫ایی به آن اختصاص داده نخواهد شد.

40
00:03:00,763 --> 00:03:04,994
‫این برنامه هنوز در حافظه وجود دارد،
‫برای مثال اگر به Task Manager
‫مراجعه کنید، این برنامه هنوز در این
‫لیست حضور دارد.

41
00:03:05,273 --> 00:03:07,314
‫اما به عنوان برنامه معلق شده علامت
‫گذاری شده است.

42
00:03:07,660 --> 00:03:09,767
‫به این معنا که تمام عملیات اجرایی
‫آن متوقف شده است.

43
00:03:09,957 --> 00:03:11,062
‫اما هنوز در حافظه حضور دارد.

44
00:03:11,379 --> 00:03:15,970
‫زمانیکه برنامه به این حالت می‌رسد
‫دو مورد ممکن است رخ دهند.

45
00:03:16,225 --> 00:03:19,921
‫یک احتمال این است که ممکن است
‫ویندوز برنامه را خاتمه دهد.

46
00:03:20,308 --> 00:03:22,731
‫و ویندوز در این زمینه اطلاع
‫رسانی خاصی را انجام نخواهد داد.

47
00:03:22,990 --> 00:03:26,542
‫و در کدهای این برنامه، این حالت
‫نسبت به قطع برق سیستم
‫قابل تمایز نیست.

48
00:03:26,668 --> 00:03:31,641
‫زمانی برنامه نسبت به این مساله آگاه
‫خواهد شد که کاربر مجددا به برنامه
‫مراجعه کند

49
00:03:31,788 --> 00:03:35,719
‫و در این حالت برنامه مجددا از
‫صفر در یک پروسه جدید اجرا خواهد شد.

50
00:03:35,729 --> 00:03:40,916
‫هرچند ویندوز همیشه برنامه‌های
‫معلق را ‫خاتمه نمی‌دهد.

51
00:03:41,143 --> 00:03:46,809
‫و تنها دلیل خاتمه برنامه‌های معلق
‫شده، پاسخگو نگه داشتن سیستم است.

52
00:03:47,026 --> 00:03:50,610
‫اگر کاربر تعداد زیادی برنامه را اجرا
‫کرده و سپس آن‌ها را فراموش ‫نماید

53
00:03:50,673 --> 00:03:52,792
‫ویندوز مختار خواهد بود تا این برنامه‫ها
‫را جهت آزاد سازی حافظه خاتمه ‫دهد.

54
00:03:53,050 --> 00:04:03,124
‫و ایده اصلی این است که دیگر
‫کاربران نیازی نداشته باشند تا مدام
‫Task Manager را جهت بررسی برنامه‌ها ‫یا
‫خاتمه دستی آن ها، مرور کنند.

55
00:04:03,301 --> 00:04:06,436
‫و در این مدل جدید مترو، ویندوز
‫اینکار را برای شما انجام خواهد داد.

56
00:04:06,480 --> 00:04:10,683
‫اما ویندوز تنها در حالت ضرورت، نسبت
‫به خاتمه یک برنامه و حذف آن
‫از حافظه اقدام خواهد کرد.

57
00:04:11,001 --> 00:04:15,385
‫و در اکثر موارد، ویندوز برنامه‌ها ‫را
‫معلق کرده اما خاتمه نخواهد داد.

58
00:04:15,704 --> 00:04:18,045
‫بنابراین این نمودار ترسیم شده کامل نیست.

59
00:04:18,253 --> 00:04:26,576
‫بنابراین هم خاتمه و هم بارگذاری مجدد
‫یک پروسه پس از معلق سازی، محتمل ‫است.

60
00:04:26,635 --> 00:04:41,071
‫و برای ویندوز بارگذاری مجدد برنامه
‫معلق شده نسبت به ‫خاتمه آن
‫و سپس اجرای مجدد پروسه،
‫ساده‌تر و سریعتر ‫است.

61
00:04:41,213 --> 00:04:47,454
‫به عنوان یک برنامه نویس باید هر
‫دو احتمال را به خوبی آزمایش نمائید.

62
00:04:47,634 --> 00:04:56,535
‫سیستم توسعه شما به احتمال زیاد به
‫اندازه کافی حافظه دارد. بنابراین در اغلب
‫موارد با حالت تعلیق نسبت به حالت
‫خاتمه برنامه مواجه خواهید شد.

63
00:04:56,816 --> 00:05:03,326
‫و در این سناریو، بازگشت به حالت
‫قبلی برنامه بسیار ساده‌تر می‌باشد.

64
00:05:03,440 --> 00:05:06,174
‫و برای انجام آن نیازی نیست تا
‫کار خاصی را انجام دهید.

65
00:05:06,497 --> 00:05:12,143
‫اما در سیستم هایی با منابع سخت
‫افزاری کمتری، برنامه شما به احتمال زیاد
‫بجای تعلیق، خاتمه خواهد یافت

66
00:05:12,329 --> 00:05:18,149
‫بنابراین باید این حالت را نیز به
‫خوبی بررسی نمائید، به نحوی که برنامه
‫همه چیز را جهت بازگردان وضع خود به حالت
‫قبلی، به خاطر بسپارد.

67
00:05:18,363 --> 00:05:22,071
‫درغیراینصورت کاربر، برنامه شما را آنچنان
‫مطمئن ‫نخواهد یافت.

68
00:05:22,101 --> 00:05:24,457
‫زیرا این احساس را خواهد داشت که
‫این برنامه مدام وضعیت قبلی خودش را
‫فراموش می‌کند.

69
00:05:24,601 --> 00:05:29,712
‫برای مثال فرض کنید که کاربر شروع
‫به تایپ در یک TextBox برنامه کرده‫است

70
00:05:30,107 --> 00:05:33,794
‫و سپس به مرورگر وب سوئیچ می‌‫کند
‫تا چیزی را از اینترنت بیابد

71
00:05:33,794 --> 00:05:36,110
‫زمانیکه مجددا به برنامه مراجعه می‌کند

72
00:05:36,405 --> 00:05:39,746
‫انتظار دارد که متنی را که پیشتر
‫تایپ کرده است، هنوز در آنجا مشاهده ‫کند.

73
00:05:39,788 --> 00:05:47,466
‫این وظیفه شما است که این حالت
‫سوئیچ از برنامه به مرورگر و به
‫خاطر سپاری وضعیت قبلی را در صورت
‫خاتمه پروسه آن، مدیریت نمائید.

74
00:05:47,773 --> 00:05:51,808
‫شما باید این کار نیمه تمام را
‫در جایی ذخیره نمائید.

75
00:05:51,877 --> 00:05:57,280
‫برای این منظور برنامه نیاز خواهد داشت
‫تا بداند ‫که در حال معلق سازی است.

76
00:05:57,454 --> 00:06:00,450
‫و در این حالت نیز این دیاگرام
‫ترسیم شده بسیار ساده انگاری است!

77
00:06:00,542 --> 00:06:05,168
‫انتقال از حالت فعال به معلق، به
‫یکباره رخ نمی‌دهد

78
00:06:05,195 --> 00:06:10,391
‫ویندوز چند ثانیه پیش از معلق سازی
‫برنامه، اخطار لازم را ارائه خواهد داد.

79
00:06:10,579 --> 00:06:14,801
‫بنابراین یک حالت انتقالی در این بین
‫رخ خواهد داد.

80
00:06:15,029 --> 00:06:19,807
‫شما در این بازه فرصت خواهید داشت
‫تا اطلاعات برنامه را ذخیره نمائید.

81
00:06:20,179 --> 00:06:24,446
‫هرچند ممکن است اینکار بیهوده به نظر
‫برسد زیرا عاقبت برنامه از تعلیق درخواهد ‫آمد

82
00:06:24,557 --> 00:06:28,079
‫اما باید حالت خاتمه یافتن برنامه را
‫نیز مدنظر داشته باشید.

83
00:06:28,498 --> 00:06:31,489
‫و شما در این بازه مدت زمان
‫زیادی را هم نخواهید داشت.

84
00:06:31,709 --> 00:06:35,458
‫ویندوز فقط 5 ثانیه تا معلق سازی
‫برنامه به شما فرصت خواهد داد.

85
00:06:35,814 --> 00:06:42,379
‫این 5 ثانیه در حقیقت علاوه بر 5
‫ثانیه ای است که در شروع پروسه
‫معلق سازی در نظر گرفته خواهد شد.

86
00:06:42,580 --> 00:06:47,137
‫و زمانیکه این زمان سپری شود، برنامه
‫دیگر فرصت اجرا نخواهد داشت.

87
00:06:47,435 --> 00:06:56,837
‫5 ثانیه مدت زمان زیادی نیست، بنابراین
‫اگر برنامه شما با اطلاعات زیادی سروکار
‫دارد بهتر است این ذخیره سازی را
‫در طول مدت زمان اجرای برنامه پیش
‫از شروع پروسه معلق سازی انجام دهید.

88
00:06:56,974 --> 00:07:02,363
‫این 5 ثانیه پیش از شروع به
‫معلق سازی تنها یک فرصت است در
‫مورد اطمینان حاصل کردن از ذخیره سازی
‫اطلاعات موقتی برنامه به نحو صحیح

89
00:07:02,775 --> 00:07:04,903
‫و تنها زمان پایان ذخیره سازی
‫اطلاعات ‫است

90
00:07:05,243 --> 00:07:07,163
‫بجای اینکه به آن به عنوان زمان
‫شروع به ذخیره سازی، نگاه شود.

91
00:07:07,194 --> 00:07:13,387
‫و در اینجا است که باید تنها اطلاعاتی
‫مانند صفحه جاری یا اطلاعات در معرض
‫دید را ذخیره کرد.

92
00:07:13,604 --> 00:07:20,307
‫اما یک تجربه ناخوشایند رابط کاربری را
‫نیز باید در اینجا مد نظر داشت.

93
00:07:20,411 --> 00:07:23,079
‫معلق سازی از دید کاربر مخفی است.

94
00:07:23,234 --> 00:07:27,802
‫و اگر به برنامه مراجعه کنند اینطور
‫احساس خواهند کرد که برنامه هنوز در
‫اینجا حضور دارد.

95
00:07:27,927 --> 00:07:33,359
‫اما در این نگارش آزمایشی ویندوز، حالت
‫خاتمه کاملا از دیدگاه کاربر نهایی مخفی ‫نیست.

96
00:07:33,697 --> 00:07:38,016
‫برنامه ای که توسط ویندوز به صورت
‫خودکار خاتمه می‌یابد، محو خواهد شد.

97
00:07:38,371 --> 00:07:45,345
‫دیگر در Task Manager حضور نداشته
‫و دیگر امکان مراجعه مجدد به آن ‫نیست.

98
00:07:45,350 --> 00:07:52,363
‫بدیهی است که اگر یک پروسه را
‫به صورت ‫دستی از طریق Task Manager
‫خاتمه دهید، این نحو محو شدن عادی خواهد بود.

99
00:07:52,369 --> 00:07:56,059
‫اما زمانیکه ویندوز بدون سروصدا تصمیم به
‫خاتمه یک برنامه برای شما می‌گیرد

100
00:07:56,372 --> 00:07:59,109
‫نبود برنامه کمی ناخوشایند خواهد بود.

101
00:07:59,399 --> 00:08:04,580
‫به این ترتیب برنامه ای را که
‫پیشتر اجرا کرده ایم، اینطور به نظر
‫خواهد رسید که دیگر در اینجا حضور ‫ندارد

102
00:08:04,885 --> 00:08:07,768
‫و نیاز خواهید داشت تا به منوی
‫آغازین ویندوز مراجعه کنید، تا بتوانید آن‫ها
‫را مجددا اجرا نمائید.

103
00:08:08,176 --> 00:08:21,100
‫این پروسه کمی زیباتر می‌شد اگر
‫ویندوز مثلا نمایی از برنامه را نمایش
‫می داد تا اینطور القاء می‌کرد
‫که هنوز در حال اجرا است
‫اما حداقل در نگارش آزمایشی
‫فعلی اینطور نیست.

