1
00:00:00,310 --> 00:00:04,958
‫پیشتر در این دوره مشاهده نمودید که
‫اشیاء WinRT را همانند اشیاء دات نت
‫مورد استفاده قرار دادیم.

2
00:00:05,333 --> 00:00:09,035
‫و یا به همین ترتیب عناصر XAML
‫ارائه شده توسط WinRT را

3
00:00:09,142 --> 00:00:11,475
‫به علاوه بسیاری از سرویس‌های سیستم.

4
00:00:11,692 --> 00:00:14,719
‫مانند موقعیت یابی و دسترسی به فایل
‫سیستم.

5
00:00:14,790 --> 00:00:19,758
‫تا اینجا اشیاء WinRT همانند اشیاء دات
‫نت احساس شدند.

6
00:00:19,879 --> 00:00:23,752
‫با تشکر از کار همزمان کامپایلر
‫سی شارپ و ران تایم آن!

7
00:00:23,994 --> 00:00:34,424
‫به علاوه یک سری مفاهیم WinRT مانند
‫اعمال غیرهمزمان نیز به صورت خودکار به
‫معادل‌های دات نتی خود نگاشت شدند.

8
00:00:34,660 --> 00:00:43,692
‫برای مثال اگر به نحوه تعریف مجموعه‌های
‫بومی در WinRT دقت کنید به یک ‫سری
‫تعاریف غیر آشنا مانند IVector خواهید ‫رسید.

9
00:00:43,935 --> 00:00:49,694
‫اما در سی شارپ این‌ها به
‫مفاهیمی آشناتر مانند IList تبدیل می‌شوند.

10
00:00:50,010 --> 00:00:57,590
‫اما در بعضی از موارد یک سری
‫از قابلیت‌های WinRT در دات نت
‫غریبه به نظر می‌رسند.

11
00:00:57,771 --> 00:01:02,719
‫برای مثال Streams در WinRT نسبت به
‫دات نت کاملا متفاوت عمل می‌کنند.

12
00:01:03,125 --> 00:01:10,676
‫Streams در WinRT یک سری اینترفیس
‫را جهت دسترسی ترتیبی و اتفاقی به
‫فایل‌ها ‫و ‫استریم‌های باینری تدارک می‌بینند.

13
00:01:11,099 --> 00:01:18,649
‫و این اینترفیس‌ها با معادل‌های ‫دات نتی
‫خود تطابق نداشته و تصمیم
‫گرفته شده است که به صورت خودکار
‫نگاشت نشوند.

14
00:01:18,963 --> 00:01:24,482
‫زیرا کلاس‌های Stream دات نت آنچنان
‫با استریم‌های غیرهمزمان WinRT تطابق ندارند.

15
00:01:24,682 --> 00:01:31,663
‫و یا یک سری نوشتن و خواندن
‫غیرهمزمان در یک موقعیت به اشتراک گذاشته
‫شده استریم نیز ممکن است در WinRT
‫وجود داشته باشد.

16
00:01:31,986 --> 00:01:36,588
‫به این معنا که باید این متدها
‫را ترتیبی فراخوانی کرد تا از نتایجی
‫غیرقابل پیش بینی حذر کرد.

17
00:01:36,741 --> 00:01:43,599
‫از آنجائیکه WinRT کاملا بر اساس
‫مدل برنامه نویسی غیرهمزمان
‫تهیه شده است، تصمیم گرفته شده
‫تا راه حل بهتری در این زمینه ‫یافت شود.

18
00:01:43,933 --> 00:01:54,763
‫برای مثال اینترفیس IRandomAccessStream
‫به عنوان مرجعی جهت دریافت تعدادی استریم
‫ورودی و خروجی در موقعیتی مشخص
‫طراحی شده است.

19
00:01:55,169 --> 00:02:03,294
‫نمایش Streams در WinRT به صورت مستقیم
‫در سی شارپ در دسترس است زیرا
‫گاهی از اوقات دسترسی مستقیم به آن
‫مفیدتر است.

20
00:02:03,620 --> 00:02:07,447
‫هرچند اگر علاقمند باشید که از
‫استریم‌های خود دات نت استفاده کنید
‫نیز این امر میسر است.

21
00:02:07,613 --> 00:02:14,384
‫به کمک اسمبلی مترویی به نام
System. Runtime. WindowsRuntime. dll

22
00:02:14,490 --> 00:02:21,329
‫که محصور کننده‌های مرتبط با
‫استریم‌های WinRT را در اختیار
‫برنامه نویس‌های دات نت قرار می‌‫دهد.

23
00:02:21,398 --> 00:02:26,166
‫این DLL هم چنین به همراه یک
‫سری متد الحاقی در فضای نام
System. IO
‫ارائه شده است.

24
00:02:26,529 --> 00:02:38,607
‫بنابراین با الحاق این فضای نام، امکان
‫دسترسی به استریم‌های WinRT در دات
‫نت میسر می‌شود.

25
00:02:38,658 --> 00:02:41,755
‫هرچند باید دقت داشت که…

26
00:02:41,858 --> 00:02:46,573
‫استریم‌ها دات نت هر دو متدهای
‫غیرهمزمان و همزمان خواندن و نوشتن را
‫ارائه می‌دهند.

27
00:02:46,714 --> 00:02:54,107
‫یکی از دلایل استفاده از استریم این
‫است که بعضی از متدهای موجود جهت
‫کار خود نیاز به استریم دارند.

28
00:02:54,252 --> 00:02:59,357
‫و اگر این حالت وجود داشته باشد،
‫استفاده از متدهای همزمان و مسدود کننده
‫ترد اصلی برنامه مد نظر نیست.

29
00:02:59,665 --> 00:03:07,146
‫وجود آن‌ها جهت استفاده در متدهای
‫غیرهمانی درنظر گرفته شده است که
‫منتظر پایان عملیات هستند.

30
00:03:07,366 --> 00:03:11,050
‫باید دقت داشت که در چه تردی
‫قرار داریم.

31
00:03:11,470 --> 00:03:14,920
‫و اینکار را نباید در ترد اصلی
‫برنامه انجام داد.

32
00:03:15,138 --> 00:03:21,069
‫و اگر اینکار را در نگارش آزمایشی
‫در دسترس امتحان کنید، ترد اصلی برنامه
‫هنگ خواهد کرد.

33
00:03:21,345 --> 00:03:28,015
‫و حتی اگر هنگ هم نکنند باید
‫از انجام آن حذر کنید، زیرا یکی
‫از اصول مهم طراحی برنامه‌های مترو
‫پاسخگو نگه داشتن ترد UI است.

34
00:03:28,171 --> 00:03:34,581
‫یک سری از ویژگی‌های WinRT بدون
‫محصور کننده ای در اختیار
‫برنامه نویس‌ها ‫قرار گرفته اند.

35
00:03:34,642 --> 00:03:37,902
‫برای مثال یکی از این موارد Buffers
‫است.

36
00:03:37,934 --> 00:03:44,115
‫بافرها در اینجا قطعه ای از حافظه
‫هستند که جهت خواندن از و یا
‫نوشتن در استریم‌ها بکار می‌روند.

37
00:03:44,151 --> 00:03:47,972
‫در دات نت عموما برای انجام اینکار
‫از آرایه ای از بایت‌ها استفاده ‫می شود.

38
00:03:48,153 --> 00:03:50,437
‫با توجه به اینکه در دات نت
‫این آرایه‌ها در حقیقت اشیاء می‌‫باشند.

39
00:03:50,643 --> 00:03:57,772
‫و WinRT بر اساس سیستم COM کار
‫می کند و آرایه‌ها در این
‫دنیا اندکی عجیب و غریب هستند!

40
00:03:58,008 --> 00:04:06,609
‫بنابراین WinRT زمانیکه نیاز به قطعه ای
‫حافظه وجود داشته باشد، مفهوم جدیدی
‫را جهت کار با استریم‌ها ‫تعریف کرده است.

41
00:04:06,926 --> 00:04:10,586
‫بافرها در WinRT همانند آرایه‌ها نیستند.

42
00:04:10,767 --> 00:04:13,817
‫بنابراین به صورت خودکار به معادل‌های ‫دات
‫نتی نگاشت نخواهند شد.

43
00:04:14,120 --> 00:04:25,079
‫اما در اینجا نیز به کمک معرفی
‫یک سری متد الحاقی یا یک سری
Extension methods
‫ختم شده به AsBuffer برای پل زدن
‫بین این دو دنیا ارائه گردیده است.

44
00:04:25,395 --> 00:04:33,494
‫همچنین مدیریت طول عمر اشیاء نیز در
‫WinRT متفاوت است.

45
00:04:33,644 --> 00:04:41,601
‫WinRT از روش شمارش ارجاعات COM جهت
‫تشخیص اشیایی که دیگر در حال استفاده نیستند
‫استفاده می‌کند.

46
00:04:41,873 --> 00:04:46,162
‫این مورد یک سری مزایا و معایب
‫را به همراه دارد.

47
00:04:46,557 --> 00:04:51,352
‫مزیت آن این است که یک شیء
‫بلافاصله می‌تواند تشخیص دهد که دیگر
‫در حال استفاده نیست.

48
00:04:51,788 --> 00:04:53,667
‫اما دو مشکل نیز در اینجا وجود
‫خواهد داشت.

49
00:04:54,054 --> 00:05:00,546
‫اول اینکه مدیریت ارجاعات به این شکل
‫نیاز به حجم بالایی از کدنویسی دارد.

50
00:05:00,686 --> 00:05:07,584
‫و اگر در این بین چیزی فراموش
‫شود که بسیار محتمل است، به نشتی
‫حافظه ختم خواهد شد.

51
00:05:07,819 --> 00:05:12,986
‫مشکل دیگر این است که ارجاعات حلقوی
‫در COM مساله ساز هستند.

52
00:05:13,070 --> 00:05:22,815
‫در این حالت نیاز به تدارک دیدن
‫یک سری ملاحظات ویژه جهت شمارش ارجاعات
‫وجود خواهد داشت.

53
00:05:23,006 --> 00:05:27,379
‫آشغال جمع کن دات نت (GC) در
‫هر دو حالت بهتر عمل می‌کند.

54
00:05:27,496 --> 00:05:34,169
‫در بسیاری از اعمال متداول دات نتی،
‫کاری را جهت مدیریت طول عمر اشیاء
‫انجام ندادن، روشی صحیح به شمار می‌‫رود.

55
00:05:34,293 --> 00:05:37,856
‫و همچنین ارجاعات حلقوی نیز الزاما مشکلی
‫محسوب نمی‌شوند.

56
00:05:38,071 --> 00:05:51,973
‫اما درگاهی از اوقات ترکیبی از ارجاعات
‫حلقوی به ارجاعات خارجی می‌توانند مشکل
‫ساز شوند.

57
00:05:52,110 --> 00:05:59,570
‫برای مثال نشتی‌های حافظه به همراه
‫استفاده ناصحیح از رویدادگردان‌ها در WPF
‫و WinForms.

58
00:05:59,628 --> 00:06:06,827
‫به همین جهت عده ای بر این
‫باور هستند که رویدادگردانی حلقوی در دات نت
‫همیشه به نشتی حافظه ختم می‌شود.

59
00:06:07,034 --> 00:06:09,095
‫اما این مورد کاملا نادرست است.

60
00:06:09,461 --> 00:06:15,176
‫و مدیریت این مسایل زمانیکه از طریق
‫دات نت با اشیاء COM کار می‌‫شود
‫بسیار پیچیده خواهد شد.

61
00:06:15,536 --> 00:06:18,693
‫که باید در برنامه‌های مترو
‫سی ‫شارپ به آن دقت داشت.

62
00:06:18,969 --> 00:06:22,528
‫در اکثر اوقات این مورد مساله خاصی
‫نیست.

63
00:06:22,809 --> 00:06:27,373
‫و توسط GC به نحو متداولی ردیابی
‫و مدیریت می‌شود.

64
00:06:27,707 --> 00:06:33,449
‫منابع ‫اشیاء COM مرتبط با WinRT به نحو
‫مطلوبی توسط GC آزاد خواهند شد.

65
00:06:33,690 --> 00:06:36,994
‫بنابراین در اکثر موارد، همه چیز بدون
‫مشکل کار خواهد کرد.

66
00:06:37,093 --> 00:06:49,972
‫اما گاهی از اوقات اگر اشیاء COM
‫ارجاعی به قسمتی از کد شما یا
‫حتی در برنامه ای دیگر داشته باشند،
‫می توانند مساله ساز گردند.

67
00:06:50,035 --> 00:07:00,166
‫برای مثال یک شیء COM می‌تواند
‫فایلی را باز نگه داشته و از باز کردن
‫مجدد آن ممانعت کند، بنابراین RCW متناظر
‫با آن آزاد می‌شود.

68
00:07:00,306 --> 00:07:05,003
‫بنابراین اگر از استریم‌های WinRT به
‫شکل مستقیمی استفاده می‌کنید.

69
00:07:05,059 --> 00:07:12,131
‫باید از روش قدیمی
Marshal. ReleaseComObject

70
00:07:12,211 --> 00:07:17,478
‫آزاد سازی منابع COM استفاده کنید بدون
‫اینکه منتظر GC جهت آزاد سازی منابع
‫آن گردید.

71
00:07:17,586 --> 00:07:24,976
‫اما اگر از محصور کننده‌های استریم
‫در اینجا استفاده کنید نیازی به این
‫کار نخواهد بود اما باید اشیاء محصور کننده
‫را Dispose کنید.

72
00:07:25,104 --> 00:07:34,071
‫درکنار این مسایل مرتبط با WinRT و
‫یکپارچگی با آن، یک سری مساله دیگر
‫نیز در سمت دات نت وجود دارد.

73
00:07:34,115 --> 00:07:37,315
‫ران تایم دات نت هنوز پابرجا است.

74
00:07:37,538 --> 00:07:41,084
‫CLR یا همان Common language runtime هنوز
‫حضور دارد.

75
00:07:41,347 --> 00:07:48,795
‫اما باید توجه داشت که با ارائه
‫دات نت 4 و نیم بعضی از
‫ویژگی‌های تقلیل یافته یا حذف شده‫اند.

76
00:07:48,875 --> 00:07:52,122
‫خصوصا در FCL یا Framework class library

77
00:07:52,166 --> 00:07:55,778
‫در بیشتر موارد این موارد حذف شده
‫به علت مسایل امنیتی بوده است.

78
00:07:55,864 --> 00:08:01,392
‫بعضی از ویژگی‌ها تنها در حالت
‫اعتماد و اطمینان کامل مانند زمانیکه
‫برنامه‌های کلاسیک ویندوز اجرا می‌شوند،
‫معنا پیدا می‌کنند.

79
00:08:01,777 --> 00:08:08,895
‫و در این موارد باید به معادل‫های
‫WinRT که مطابق شرایط امنیتی آن
‫طراحی شده اند، پرداخت.

80
00:08:09,111 --> 00:08:12,799
‫اما بعضی از ویژگی‌های حذف نشده
‫نیز تغییر کرده اند، برای مثال…

81
00:08:13,012 --> 00:08:15,704
‫Reflection دیگر مانند سابق نیست.

82
00:08:15,816 --> 00:08:21,187
‫و جهت مصرف کمتر حافظه تغییر و
‫تحول یافته است.

83
00:08:21,302 --> 00:08:30,340
‫این مسایل سبب خواهند شد که انتقال
‫اکثر برنامه‌های موجود دات نت به
‫معادل‌های مترو نیاز به تغییرات قابل
‫ملاحظه ای داشته باشند.

84
00:08:30,434 --> 00:08:44,277
‫در این مدل جدید، پیش از امکان
‫کامپایل نهایی باید تغییرات قابل ملاحظه ای
‫را در کدهای موجود داد تا با
‫شرایط طراحی جدید سازگار گردند.

85
00:08:44,606 --> 00:08:53,420
‫اما اگر برنامه نویس باسابقه سی شارپ
‫باشید، این محیط جدید برای شما بسیار
‫آشنا خواهد بود تا غریبه.

