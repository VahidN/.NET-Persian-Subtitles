1
00:00:00,310 --> 00:00:05,427
‫در ادامه نحوه دریافت موقعیت مکانی
‫جاری یک کاربر بررسی خواهد شد.

2
00:00:05,485 --> 00:00:08,142
‫این مورد عملیاتی است که می‌تواند
‫مدتی به طول انجامد.

3
00:00:08,349 --> 00:00:15,234
‫به دلایل زیادی؛ برای مثال برنامه نیاز دارد
‫تا کاربر موقعیت جاری خود را ارسال کند…

4
00:00:15,369 --> 00:00:19,271
‫اما کاربر هم اکنون برای نهار بیرون
‫رفته است و مدتی باید منتظر ماند.

5
00:00:19,310 --> 00:00:26,586
‫هرچند ارسال دستی نهایی اطلاعات سریع خواهد
‫بود اما در واقع تشخیص موقعیت مکانی
‫عموما پروسه ای کند است.

6
00:00:26,808 --> 00:00:32,824
‫برای مثال دستگاه دارای GPS باید روشن
‫شود و پس از مدتی به کمک
‫ماهواره موقعیت جاری را دریافت نماید.

7
00:00:32,924 --> 00:00:40,038
‫یا اگر دریافت این اطلاعات از طریق
‫شبکه باشد، پروسه اندکی سریعتر خواهد بود
‫اما آنی نیست.

8
00:00:40,319 --> 00:00:43,825
‫بنابراین تعیین موقعیت مکانی یک API غیرهمزمان
‫است.

9
00:00:43,925 --> 00:00:48,318
‫در اینجا مستندات مرتبط با GeoLocation تعریف
‫شده در WinRT را ملاحظه می‌کنید.

10
00:00:48,679 --> 00:00:52,086
‫نام متد به Async ختم شده است.

11
00:00:52,428 --> 00:00:54,596
‫تا مشخص کند که این متد از
‫نوع غیرهمزمان است.

12
00:00:54,887 --> 00:00:59,164
‫و شیء ایی را بر می‌گرداند
‫که بیانگر درحال انجام بودن پروسه است.

13
00:00:59,194 --> 00:01:03,080
‫این شیء تعدادی از اینترفیس‌های WinRT
‫را پیاده سازی می‌کند.

14
00:01:03,338 --> 00:01:05,137
‫که بیانگر یک عمل غیرهمزمان هستند.

15
00:01:05,228 --> 00:01:11,844
‫اما در سی شارپ این موارد به
‫الگویی تبدیل می‌شوند که امکان استفاده
‫از واژه‌های کلیدی await و async
‫آن را میسر خواهند کرد.

16
00:01:12,216 --> 00:01:15,891
‫در ادامه یک برنامه ساده را در
‫این زمینه بررسی خواهیم کرد.

17
00:01:16,311 --> 00:01:17,939
‫که حاوی یک دکمه و قطعه ای
‫متنی (برچسب) است.

18
00:01:18,028 --> 00:01:24,084
‫از دکمه جهت دریافت موقعیت جاری و
‫نمایش این اطلاعات در برچسب
‫استفاده خواهد شد.

19
00:01:24,428 --> 00:01:26,560
‫اجازه دهید تا به فایل code behind
‫سوئیچ کنیم.

20
00:01:26,968 --> 00:01:28,902
‫و به متد رویدادگردان کلیک آن نگاهی
‫بیندازیم.

21
00:01:29,152 --> 00:01:35,368
‫در اینجا متغییر locator را با
‫وهله ای از شیء Gelocator مقدار دهی
‫خواهیم کرد.

22
00:01:35,775 --> 00:01:43,040
‫این شیء در فضای نام
Windows. Devices. Geolocation
‫مرتبط ‫با WinRT قرار دارد.

23
00:01:43,343 --> 00:01:48,362
‫نهایتا چیزی که از این شیء نیاز
‫داریم GeoPosition می‌باشد.

24
00:01:48,403 --> 00:01:56,478
‫در اینجا اگر فقط متد GetGeopositionAsync را
‫فراخوانی کنیم…

25
00:01:56,661 --> 00:02:01,295
‫کامپایلر چنین اجازه ای را نخواهد داد
‫زیرا خروجی این متد از نوع GeoPosition
‫نیست.

26
00:02:01,375 --> 00:02:04,148
‫خروجی آن شیء ایی است که بیانگر انجام
‫عملیات است.

27
00:02:04,484 --> 00:02:09,139
‫تنها کاری که اینجا جهت تصحیح این
‫فراخوانی باید صورت گیرد، استفاده
‫از واژه کلیدی await است.

28
00:02:09,248 --> 00:02:13,255
‫و همچنین برای این مقصود باید کل
‫متد را نیز به صورت async تعریف
‫کرد.

29
00:02:13,454 --> 00:02:23,195
‫به این ترتیب کامپایلر به صورت خودکار
‫متد callback ایی را در پشت صحنه
‫تدارک دیده و خروجی آن را در
‫اختیار برنامه و متغیر location قرار می‌‫دهد.

30
00:02:23,562 --> 00:02:45,289
‫نهایتا از این اطلاعات دریافتی، موقعیت مکانی
‫جاری را در یک برچسب نمایش خواهیم
‫داد.

31
00:02:45,555 --> 00:02:51,500
‫اجازه دهید تا یک breakpoint را در
‫ابتدای این متد قرار داده و اجرای
‫آن را بررسی کنیم.

32
00:02:51,651 --> 00:02:56,295
‫در ابتدا بر روی دکمه کلیک خواهیم
‫کرد…

33
00:02:56,639 --> 00:02:58,242
‫و سپس روال رویدادگردان کلیک
‫اجرا می‌گردد.

34
00:02:58,518 --> 00:03:13,357
‫در ادامه از آنجائیکه عملیات دریافت موقعیت
‫جاری زمانبر خواهد بود، breakpoint بعدی را
‫بر روی سطر پس از await قرار
‫می دهیم.

35
00:03:13,665 --> 00:03:16,375
‫و به برنامه باز می‌گردیم.

36
00:03:16,651 --> 00:03:25,784
‫در ادامه ویندوز از کاربر سؤال خواهد
‫کرد که آیا مجاز است اطلاعات مکانی
‫جاری را در اختیار برنامه قرار دهد
‫یا خیر؟

37
00:03:26,210 --> 00:03:31,843
‫با پذیرفتن این درخواست، متد GetGeopositionAsync
‫مجوز ادامه کار را خواهد یافت.

38
00:03:32,235 --> 00:03:39,499
‫و پس از دریافت اطلاعات، رابط کاربری
‫را به روز خواهد کرد.

39
00:03:39,529 --> 00:03:45,060
‫موردی را که باید به آن دقت
‫کرد این است که خطای قرار داشتن
‫بر روی یک ترد نادرست را دریافت
‫نکرده ایم.

40
00:03:45,146 --> 00:03:49,389
‫همانند WPF و سیلورلایت، در مترو نیز
‫باید در مورد نحوهٔ به روز
‫رسانی UI از طریق تردهای دیگر ملاحظات
‫خاصی صورت گیرد.

41
00:03:49,546 --> 00:03:52,187
‫باید بر روی ترد صحیحی قرار داشت
‫تا بتوان رابط کاربری را به روز
‫کرد.

42
00:03:52,573 --> 00:03:59,346
‫اما در اینجا واژه کلیدی await به
‫کمک محصور کننده‌های غیرهمزمان
WinRT…

43
00:03:59,541 --> 00:04:05,097
‫پس از پایان انجام متد در تردی
‫دیگر، مابقی آن در ترد اصلی برنامه
‫انجام خواهد شد.

44
00:04:05,465 --> 00:04:10,131
‫و به این ترتیب می‌توان به
‫قطعه کدی کاملا متداول و معمول رسید.

45
00:04:10,371 --> 00:04:17,075
‫به نظر اعمال انجام شده در این
‫متد به صورت متوالی انجام می‌شوند؛
‫ابتدا وهله سازی صورت گرفته و بعد
‫وضعیت جاری درخواست می‌شود و…

46
00:04:17,340 --> 00:04:20,370
‫و سپس نتیجه در یک برچسب نمایش
‫داده خواهد شد.

47
00:04:20,570 --> 00:04:25,953
‫هرچند این عملیات زمانبر است اما ترد
‫اصلی برنامه یا ترد UI، مسدود
‫نخواهد شد.

48
00:04:26,118 --> 00:04:32,401
‫برای مثال مشاهده کردید که در این
‫حین برنامه پاسخگو بوده و امکان پاسخ
‫دهی به سؤال پرسیده شده وجود داشت.

49
00:04:32,710 --> 00:04:41,300
‫به این ترتیب در حین انجام عملیاتی
‫زمانبر، مابقی برنامه هنوز پاسخگوی
‫ورودی‌های کاربر خواهد بود.

50
00:04:41,721 --> 00:04:48,659
‫این امکانات مانند یک شمشیر دو لبه
‫است. می‌توان تعداد قابل توجهی از
‫اعمال را به یکباره انجام داد.

51
00:04:48,903 --> 00:04:53,306
‫در اینجا برای نمونه حین کار با
‫فایل‌ها باید دقت کافی را مبذول
‫داشت.

52
00:04:53,546 --> 00:05:01,518
‫برای مثال اگر چندین عملیات همزمان به
‫روز رسانی یک فایل شروع به انجام کنند
‫چه اتفاقی خواهد افتاد؟

53
00:05:01,743 --> 00:05:08,524
‫به این ترتیب به چندین عملیات که
‫سعی در به روز رسانی یک فایل
‫را در آن واحد دارند، خواهیم رسید.

54
00:05:08,631 --> 00:05:10,348
‫که به هیچ عنوان مطلوب نیست.

55
00:05:10,703 --> 00:05:13,304
‫بنابراین باید به پروسه در حال انجام
‫به دقت فکر کرد.

56
00:05:13,385 --> 00:05:18,165
‫واژه‌های async و await تنها ظاهر
‫برنامه را جهت انجام امور غیرهمزمان
‫بهبود می‌بخشند.

57
00:05:18,586 --> 00:05:21,270
‫اما به این معنا نیست که باید
‫نحوهٔ انجام غیرهمزمان پروسه
‫را به کلی فراموش کرد.

58
00:05:21,533 --> 00:05:31,356
‫این مورد مطلبی است که برای
‫برنامه نویس‌های تازه کار اندکی مشکل
‫بوده و نیاز به دقت بیشتری است.

59
00:05:31,498 --> 00:05:43,075
‫اما پس از درک این مباحث و
‫اندکی تجربه، امکانات جدید زبان، کار با
‫اعمال غیرهمزمان WinRT را به شدت ساده
‫و دلپذیر می‌کنند.

