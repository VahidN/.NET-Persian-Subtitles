1
00:00:00,310 --> 00:00:04,316
‫WinRT از دو روش برای ساخت رابط
‫کاربری پشتیبانی می‌کند.

2
00:00:04,427 --> 00:00:08,666
‫برنامه نویس‌های جاوا اسکریپت با CSS
‫JS ، HTML و SVG کار خواهند
‫کرد.

3
00:00:08,745 --> 00:00:14,199
‫مابقی شامل برنامه نویس‌های سی شارپ،
‫وی بی و سی++ با XAML سروکار
‫خواهند داشت.

4
00:00:14,373 --> 00:00:20,151
‫اگر بخواهیم دقیق‌تر توضیح دهیم باید
‫گفت که برنامه نویس‌های سی++ از
‫دایرکت ایکس هم می‌توانند استفاده کنند.

5
00:00:20,469 --> 00:00:25,413
‫هرچند در این حالت اخیر اندکی بهبود
‫کارآیی احساس خواهد شد اما روش سختی
‫است برای تهیه و طراحی رابط کاربری.

6
00:00:25,761 --> 00:00:31,197
‫اگر بخواهید که از کنترل‌های توکار
‫مانند دکمه ها، لیست‌ها و غیره
‫استفاده کنید…

7
00:00:31,369 --> 00:00:35,622
‫XAML و فایل‌های Code behind آن
‫روش متداول کار با سبک مترو است
‫البته منهای بحث جاوا اسکریپت و HTML

8
00:00:35,727 --> 00:00:41,235
‫زمانیکه XAML در سال 2003 به عنوان
‫قسمتی از WPF معرفی شد…

9
00:00:41,263 --> 00:00:46,553
‫XAML به معنای extensible application markup language
‫بود.

10
00:00:46,790 --> 00:00:55,560
‫AML آن فقط برای اینکه بتوان آن را بهتر
‫تلفظ کرد اختراع شد و معنای مهمی نداشت!

11
00:00:55,923 --> 00:01:00,837
‫این حروف مهندسی معکوس شده است تا
‫یک واژه را تشکیل دهد!

12
00:01:01,022 --> 00:01:11,438
‫اکنون از آن فقط X باقی مانده
‫و AML آن به فراموشی سپرده شده
‫است!

13
00:01:11,760 --> 00:01:24,880
‫هرچند دوباره… مستندات همان مخفف را
‫بیان می‌کنند!

14
00:01:24,966 --> 00:01:33,053
‫اگر پیشتر با WPF ، Silverlight و
‫یا ویندوز فون کار کرده باشید، این
‫قسمت نسبتا برای شما آشنا خواهد بود.

15
00:01:33,297 --> 00:01:37,218
‫زیرا مفاهیم پایه ای یکسان است. برای مثال
‫XAML نوعی XML است.

16
00:01:37,594 --> 00:01:40,950
‫که بیانگر تعاریف اشیاء رابط کاربری
‫به کمک عناصر XML است.

17
00:01:41,078 --> 00:01:43,587
‫و در آن attributes بیانگر خواص اشیاء
‫می باشند.

18
00:01:43,851 --> 00:01:53,072
‫برای مثال جهت تعریف یک دکمه در
‫XAML ابتدا تگ‌های آن مشخص شده
‫و سپس به کمک attributes محتوا و
‫اندازه قلم آن مشخص می‌شود.

19
00:01:53,258 --> 00:01:56,202
‫با استفاده از attributes همچنین می‌توان
‫رویدادگردان‌ها را تعریف کرد.

20
00:01:56,458 --> 00:02:03,671
‫برای مثال زمانیکه روی دکمه کلیک می‌‫شود
‫به این ترتیب می‌توان به
‫کمک متد OnOkButtonClicked رخداد
‫رسیده را مدیریت ‫کرد.

21
00:02:03,895 --> 00:02:12,899
‫در فایل code behind متناظر با فایل
‫XAML این متد تعریف می‌گردد.

22
00:02:13,129 --> 00:02:19,514
‫المان‌های XAML یک درخت (Tree) را
‫تشکیل می‌دهند و عموما تودرتو تعریف
‫می شوند.

23
00:02:19,579 --> 00:02:25,093
‫ریشه یک XAML را عموما user control
‫تشکیل می‌دهد.

24
00:02:25,492 --> 00:02:30,972
‫داخل این user control از المان‌های در برگیرنده
‫XAML جهت تعریف رابط کاربری استفاده خواهد
‫شد.

25
00:02:30,978 --> 00:02:33,064
‫برای مثال در این میان عنصر
‫Grid یکی از موارد محبوب
‫به شمار می‌رود.

26
00:02:33,357 --> 00:02:37,512
‫XAML به کمک فضاهای نام XML جهت
‫مشخص سازی عناصر استفاده می‌کند.

27
00:02:37,899 --> 00:02:41,312
‫زیرا کاربرد XAML تنها در ساخت رابط
‫کاربری نیست.

28
00:02:41,688 --> 00:02:51,925
‫برای مثال مطابق تصویر با بیان فضای
‫نام ذکر شده، مشخص خواهیم کرد که
‫فایل XAML جاری کاربرد تعاریف رابط کاربری
‫را دارد.

29
00:02:52,131 --> 00:02:58,191
‫همچنین عموما فضای نام دومی را هم
‫با پیشوند x ملاحظه خواهید کرد.

30
00:02:58,520 --> 00:03:03,334
‫از این مورد هم جهت تعریف ویژگی‌ها ‫و عناصر XAML استفاده می‌گردد.

31
00:03:03,437 --> 00:03:11,508
‫برای مثال همیشه امکان تعریف Name جهت
‫عناصر XAML وجود دارد.

32
00:03:11,645 --> 00:03:19,403
‫به این ترتیب نامگذاری در فضای نام
‫x یاد شده میسر می‌شود بجای
‫اینکه در فضای نام presentation قرار گیرد.

33
00:03:19,508 --> 00:03:24,329
‫برای مثال به کمک x: Name می‌توان
‫به دکمه تعریف شده نامی را انتساب
‫داد.

34
00:03:24,486 --> 00:03:37,527
‫به این ترتیب می‌توان به این
‫دکمه از طریق code behind نیز دسترسی
‫پیدا کرد زیرا فیلد متناظر آن به
‫صورت خودکار تعریف خواهد گردید.

35
00:03:37,561 --> 00:03:50,645
‫به این ترتیب می‌توان خاصیت‌های ‫یک شیء
‫را در زمان اجرا تغییر ‫داد
‫یا متدهایی را بر روی ‫آنها اجرا کرد.

36
00:03:50,767 --> 00:03:57,459
‫و این دقیقا یکی از مفاهیم پایه‫ای
‫XAML است به این ترتیب که
‫هر عنصر با یک شیء متناظر می‌‫باشد.

37
00:03:57,889 --> 00:04:01,677
‫XAML در حقیقت یک دستور زبان ساخت
‫درختی از اشیاء است.

38
00:04:01,830 --> 00:04:16,876
‫عموما تصور می‌شود که XAML زبان ساخت
‫رابط کاربری است. 
‫اما این درخت اشیاء است که رابط
‫کاربری را تشکیل می‌دهد و XAML تنها
‫بیانگر آن می‌باشد.

39
00:04:16,926 --> 00:04:32,814
‫به این معنا که می‌توان تمام
‫محتویات یک فایل XAML را با کدنویسی
‫هم در زمان اجرا تولید کرد و
‫محتوای آن ایستا نیست.

40
00:04:32,834 --> 00:04:38,684
‫البته در اینجا (مترو) اندکی تفاوت را
‫با آنچه که در WPF وجود دارد،
‫شاهد خواهید بود.

41
00:04:39,082 --> 00:04:43,581
‫در WPF ، عناصر XAML دقیقا متناظر
‫با اشیاء دات نتی هستند.

42
00:04:43,612 --> 00:04:47,850
‫اما در مترو، این عناصر متناظر با
‫اشیاء WinRT می‌باشند.

43
00:04:48,072 --> 00:04:57,216
‫به همین دلیل است که اکنون
‫می توان از XAML در سی++ بومی
‫هم استفاده کرد.

44
00:04:57,256 --> 00:05:08,032
‫البته به عنوان برنامه نویس دات نت
‫آنچنان تغییری را احساس نخواهید کرد زیرا
‫محصور کننده‌های موجود به صورت خودکار
‫اشیاء متناظر دات نتی را نیز برای
‫شما جهت استفاده تولید خواهند نمود.

45
00:05:08,399 --> 00:05:12,303
‫به این مورد Runtime callable wrappers گفته
‫می شود…

46
00:05:12,331 --> 00:05:14,025
‫یا به صورت مخفف RCW

47
00:05:14,435 --> 00:05:22,497
‫اگر با COM Interop آشنا باشید در
‫اینجا شاهد تکاملی در این زمینه خواهید
‫بود.

48
00:05:22,846 --> 00:05:36,078
‫برای نمونه دکمه ای که در اینجا
‫با آن کار خواهید کرد هرچند یک
‫شیء دات نتی است اما در حقیقت
‫یک محصور کنندهٔ دکمهٔ بومی
‫WinRT می‌باشد.

49
00:05:36,204 --> 00:05:52,173
‫این مکانیزم با آنچه که در Silverlight
‫درجریان است بسیار شباهت دارد. در Silverlight
‫نیز از اشیاء می‌توان در جاوا اسکریپت و Silverlight
‫استفاده کرد و این اشیاء نیز محصور کنندهٔ یک
‫سری شیء دیگر هستند.

50
00:05:52,591 --> 00:06:00,645
‫تفاوت مترو با آنچه که در Silverlight
‫مرسوم است این است که این اشیاء
‫اکنون مستند شده اند و همچنین امکان
‫استفاده مستقیم آن‌ها در سی++ مهیا
‫شده است.

51
00:06:00,738 --> 00:06:05,703
‫در کل تمام این‌ها برای برنامه
‫نویس‌های سی شارپ شبیه به اشیاء
‫متداول دات نتی هستند و نه بیشتر.

52
00:06:05,757 --> 00:06:10,823
‫البته ممکن است با شنیدن COM Interop
‫اندکی به شک افتاده باشید…

53
00:06:11,150 --> 00:06:20,830
‫که آیا کار کردن با آن‌ها ‫در
‫سی شارپ ساده است؟ چون پیشتر
‫اینگونه نبوده است. باید گفت که در
‫ادامه خواهید دید که کار کردن با
‫این اشیاء در دات نت چقدر ساده ‫می باشد.

54
00:06:21,106 --> 00:06:33,194
‫بدیهی است که در طول دوره به
‫تمام موارد و عناصر مهم اشاره خواهد
‫شد.

55
00:06:33,306 --> 00:06:43,717
‫که به هر کدام در یک ماژول
‫جدا رسیدگی می‌گردد.

