1
00:00:01,137 --> 00:00:05,148
‫زمانیکه یک المان رابط کاربری را
‫به یک المان دیگر bind می‌کنید

2
00:00:05,148 --> 00:00:09,797
‫XAML کار کنترل هر دو شیء را عهده دار
‫خواهد شد، بنابراین از تغییرات
‫خواص آن‌ها ‫نیز مطلع می‌گردد.

3
00:00:10,216 --> 00:00:11,114
‫برای مثال

4
00:00:11,424 --> 00:00:14,277
‫در مثال‌های قبل مشاهده کردید
‫زمانیکه خاصیت عرض یک مستطیل

5
00:00:14,357 --> 00:00:16,053
‫به خاصیت Value یک Silder مقید می‌شود

6
00:00:16,412 --> 00:00:21,401
‫XAML از هر نوع تغییراتی در خاصیت
‫Value مطلع است و به همین دلیل
‫می داند که باید binding را به روز کند

7
00:00:21,610 --> 00:00:23,386
‫و به این ترتیب مقدار عرض مستطیل
‫را به روز خواهد نمود.

8
00:00:24,185 --> 00:00:26,190
‫اما در مورد مثال قبل از آن چطور؟

9
00:00:26,429 --> 00:00:32,057
‫زمانیکه خاصیت Text یک TextBlock را
‫به خاصیتی از یک شیء ساده دات نتی
‫Bind کردم.

10
00:00:32,815 --> 00:00:36,546
‫اگر از طریق کد نویسی مقدار یکی
‫از خاصیت‌ها را تغییر دهم، چه خواهد شد؟

11
00:00:37,335 --> 00:00:41,795
‫در این حالت سیستم Binding راهی
‫را برای تشخیص تغییرات
‫صورت گرفته، نمی‌شناسد.

12
00:00:42,333 --> 00:00:47,442
‫در دات نت، خواص اشیاء دارای مکانیزم
‫ذاتی اعلام تغییرات خود نیستند.

13
00:00:48,898 --> 00:00:49,537
‫هرچند

14
00:00:49,617 --> 00:00:51,622
‫امکان فراهم آوردن چنین امکانی میسر است.

15
00:00:52,550 --> 00:00:55,922
‫در فضای نام
Windows. UI. XAML. Data

16
00:00:56,012 --> 00:00:58,896
‫اینترفیسی به نام INotifyPropertyChanged
‫وجود دارد.

17
00:00:58,965 --> 00:01:00,372
‫که رخدادی را

18
00:01:00,372 --> 00:01:02,996
‫به نام PropertyChanged تعریف می‌کند.

19
00:01:04,453 --> 00:01:06,478
‫اگر منبع داده ما این اینترفیس را
‫پیاده سازی کند

20
00:01:06,548 --> 00:01:08,673
‫سیستم Binding این رخداد را
‫مدیریت کرده

21
00:01:09,013 --> 00:01:15,737
‫و اگر هربار که مقداری تغییر می‌کند،
‫این رخداد را سبب شوید، سیستم
‫Binding از وجود تغییرات مطلع شده
‫و اطلاعات متناظر را به روز خواهد کرد.

22
00:01:16,965 --> 00:01:17,763
‫هرچند باید به چند نکته نیز دقت داشت.

23
00:01:18,341 --> 00:01:21,285
‫شاید تصور کنید که هم اکنون با این
‫اینترفیس آشنا هستید

24
00:01:21,404 --> 00:01:32,789
‫این اینترفیس در حقیقت در دات نت
‫نگارش 2 معرفی گردید و در
‫WinForms و سپس WPF و سیلورلایت
‫نیز مورد استفاده قرار گرفته است.

25
00:01:33,198 --> 00:01:34,694
‫اما باید دقت داشت که این اینترفیس
‫در اینجا (WinRT) با نمونه قبلی متفاوت است.

26
00:01:35,143 --> 00:01:38,595
‫نمونه قبلی آن در فضای نام
System. ComponetModel
‫تعریف شده بود

27
00:01:39,254 --> 00:01:41,648
‫و WinRT اینترفیس دیگری را تعریف کرده است.

28
00:01:42,018 --> 00:01:46,228
‫هرچند نام و ظاهر آن یکی است
‫اما در فضای نام دیگری تعریف شده است.

29
00:01:46,627 --> 00:01:47,356
‫و

30
00:01:47,425 --> 00:01:48,812
‫بجز شباهت‌های ظاهری

31
00:01:49,141 --> 00:01:59,877
‫باید درنظر داشت که اینترفیس اصلی
‫دات نتی هنوز نیز در همان فضای نام قبلی
‫در WinRT قابل استفاده است

32
00:01:59,897 --> 00:02:04,616
‫اما در دو فضای نام مختلف تعریف شده
‫و قابل دسترسی است.

33
00:02:05,883 --> 00:02:09,635
‫و این شبیه به یک تله است، زیرا
‫ممکن است به اشتباه بجای هم
‫مورد استفاده قرار گیرند.

34
00:02:10,253 --> 00:02:17,667
‫در WinRT ، خواص XAML تنها جهت
‫کار با اینترفیس جدید مهیا شده اند که در
‫فضای نام Windows. UI. XAML. Data
‫تعریف گردیده است.

35
00:02:18,355 --> 00:02:21,797
‫و اینترفیس قدیمی را شناسایی نخواهد کرد؛
‫بنابراین حین انتخاب فضاهای نام باید دقت داشت.

36
00:02:23,024 --> 00:02:40,555
‫البته این مورد مطابق نظرات
‫کارکنان مایکروسافت بالاخره
‫حذف شده و در نگارش نهایی
‫ویندوز 8، تبدیل خودکار آن به نمونه جدید

37
00:02:40,555 --> 00:02:43,059
‫توسط CLR در پشت صحنه انجام خواهد شد.

38
00:02:43,757 --> 00:02:48,407
‫البته از این نوع نگاشت‌های خودکار
‫در نگارش جدید دات نت زیاد صورت گرفته است
‫بنابراین این مورد نیز آنچنان مساله ای نخواهد بود.

39
00:02:50,193 --> 00:02:53,814
‫از یک تله دیگر نیز باید مطلع بود

40
00:02:54,573 --> 00:02:58,155
‫WinRT کلاس دیگری را به نام
‫DependencyObject دارد

41
00:02:58,195 --> 00:03:00,779
‫که بسیار شبیه به نام شیء مشابهی
‫در WPF و سیلورلایت است.

42
00:03:00,888 --> 00:03:03,353
‫و چیزی است که تمام عناصر رابط کاربری
‫از آن مشتق می‌شوند.

43
00:03:04,480 --> 00:03:17,271
‫هرچند هدف DependencyObject این بوده است
‫که به عنوان کلاس پایه عناصر رابط کاربری
‫بکار رود؛ بعضی از برنامه نویس‌ها از آن
‫سابقا جهت تعریف اشیاء قابل bind
‫استفاده کرده اند، زیرا این شیء از
‫سیستم اطلاع رسانی تغییرات خاص خودش
‫بهره مند است.

44
00:03:18,089 --> 00:03:20,204
‫اما این مورد دیگر در WinRT کار نمی‌کند.

45
00:03:20,374 --> 00:03:29,324
‫در WinRT اگر کلاسی را تعریف کنید
‫که از DependencyObject مشتق شود
‫و در ضمن یک عنصر رابط کاربری نیز نباشد،
‫و از آن به عنوان منبع داده استفاده کنید

46
00:03:29,613 --> 00:03:31,968
‫XAML تغییرات رخ داده در خواص آن را
‫تشخیص نخواهد داد.

47
00:03:32,636 --> 00:03:35,400
‫این مورد را باید حین انتقال کدهای قدیمی

48
00:03:35,460 --> 00:03:38,907
‫سیلورلایت و WPF به WinRT مد نظر داشت.

