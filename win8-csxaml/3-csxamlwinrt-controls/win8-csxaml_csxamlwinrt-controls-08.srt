1
00:00:00,310 --> 00:00:04,660
‫این برنامه مترو دارای یک ProgressRing در
‫بالای صفحه است.

2
00:00:04,661 --> 00:00:07,878
‫به همراه تعدادی دکمه تا پویانمایی
‫آن‫را آغاز و خاتمه دهند.

3
00:00:07,932 --> 00:00:09,691
‫که به صورت پیش فرض خاموش است.

4
00:00:10,005 --> 00:00:15,177
‫و در ذیل آن یک ProgressBar به
‫همراه تعدادی دکمه جهت کنترل اعمال آن
‫قرار دارند.

5
00:00:15,216 --> 00:00:16,666
‫اجازه دهید تا به فایل Code behind
‫نگاهی بیندازیم.

6
00:00:17,015 --> 00:00:21,095
‫ProgressRing واقعا دیگر از این
‫ساده‌تر ‫نمی تواند باشد.

7
00:00:21,128 --> 00:00:23,054
‫این کنترل دارای خاصیتی است به نام
IsActive.

8
00:00:23,120 --> 00:00:27,255
‫اگر آن خاصیت را true کنیم، پویانمایی
‫این کنترل شروع خواهد شد.

9
00:00:27,397 --> 00:00:29,970
‫و اگر آن را false کنیم، پویانمایی
‫متوقف خواهد شد.

10
00:00:30,220 --> 00:00:33,741
‫در ادامه برنامه را اجرا می‌کنیم
‫تا این کنترل بسیار ساده را با
‫هم مرور کنیم.

11
00:00:34,102 --> 00:00:36,092
‫به دکمه شروع با انگشت ضربه می‌‫زنم.

12
00:00:36,265 --> 00:00:38,904
‫و روال رویدادگردان آن، خاصیت IsActive را
‫به true تنظیم خواهد کرد.

13
00:00:39,231 --> 00:00:41,229
‫و سپس پویانمایی شروع خواهد شد.

14
00:00:41,497 --> 00:00:48,765
‫البته این ویدیو با frame rate پایینی
‫به علت محدودیت‌های اولین نگارش آزمایشی
‫عمومی ویندوز 8، تهیه شده است.

15
00:00:48,831 --> 00:00:52,023
‫بنابراین به خوبی نمی‌توان این پویانمایی
‫را در اینجا به نحو کاملی نمایش ‫داد.

16
00:00:52,317 --> 00:00:59,115
‫در حالت واقعی، این پویانمایی بسیار دلپذیر
‫و یکنواخت است.

17
00:00:59,457 --> 00:01:05,062
‫در ادامه با ضربه زدن به دکمه
‫توقف، خاصیت IsActive به false تنظیم شده
‫و پویانمایی متوقف می‌شود.

18
00:01:05,065 --> 00:01:08,849
‫در ادامه اجازه دهید تا ProgressBar را
‫در عمل بررسی کنیم.

19
00:01:09,210 --> 00:01:11,875
‫اگر در ابتدا بر روی دکمه «نامشخص» 
‫کلیک کنیم

20
00:01:12,105 --> 00:01:14,544
‫پویانمایی مشابهی همانند
‫کنترل ProgressRing را به
‫نمایش خواهد گذاشت

21
00:01:14,888 --> 00:01:18,815
‫اگر از ویندوز فون استفاده کرده باشید،
‫این نمایش برای شما آشنا خواهد بود.

22
00:01:18,932 --> 00:01:26,103
‫اما علت اصلی استفاده از یک ProgressBar
‫نمایش تخمینی از میزان پیشرفت و مدت
‫زمان باقیمانده پایان کار است.

23
00:01:26,246 --> 00:01:28,807
‫بنابراین به دکمه آغاز، ضربه می‌زنم
‫تا با نحوه نمایش آن آشنا شویم.

24
00:01:29,152 --> 00:01:32,689
‫این یک تجربه متداول و معمول کار
‫با کنترل ProgressBar است.

25
00:01:32,809 --> 00:01:36,812
‫به کد بر می‌گردیم تا نحوه
‫انجام آن را مشاهده کنیم.

26
00:01:37,116 --> 00:01:40,986
‫در اینجا یک شیء DispatcherTimer
‫را ایجاد کرده ام

27
00:01:41,403 --> 00:01:43,760
‫که دقیقا همانند معادل WPF خود رفتار
‫می کند.

28
00:01:43,841 --> 00:01:47,536
‫که سبب فراخوانی روال رویدادگردان Tick در
‫هر 400 میلی ثانیه یکبار می‌گردد.

29
00:01:47,823 --> 00:01:53,291
‫و به این ترتیب مقدار خاصیت Value
‫کنترل ProgressBar تنظیم می‌گردد.

30
00:01:53,705 --> 00:02:03,188
‫و به این ترتیب عملیات پیشرفت، نمایش
‫داده خواهد شد، هرچند در یک برنامه
‫واقعی نیاز خواهید داشت تا محاسباتی را
‫جهت نحوه نمایش درصد پیشرفت عملیات
‫انجام دهید، بجای نرخ ثابت افزایشی
‫نمایش داده شده در اینجا.

31
00:02:03,255 --> 00:02:08,603
‫برای استفاده از حالت نامشخص،
‫خاصیت IsIndeterminate
‫وجود دارد.

32
00:02:08,933 --> 00:02:17,435
‫کنترل ProgressBar همچنین دارای خاصیت‌های دیگری
‫مانند ShowError و ShowPaused جهت مشخص سازی
‫وضعیت بروز خطایی در عملیات یا معلق
‫شدن آن مفید هستند.

33
00:02:17,660 --> 00:02:21,885
‫ضمنا بازه عملیات ProgressBar نیز قابل تنظیم
‫است.

34
00:02:21,987 --> 00:02:24,554
‫در اینجا این بازه به 100 تنظیم
‫شده است.

35
00:02:24,974 --> 00:02:26,059
‫اما شما هر بازه ای را می‌‫توانید
‫تنظیم کنید.

36
00:02:26,467 --> 00:02:36,813
‫این بازه در کدهای XAML برنامه به
‫کمک خواص حداقل و حداکثر که در
‫اینجا به صفر و صد تنظیم شده‫اند،
‫مشخص گردیده است.

