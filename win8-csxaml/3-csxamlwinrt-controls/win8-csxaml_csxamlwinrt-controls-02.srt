1
00:00:00,310 --> 00:00:06,999
‫برخلاف روش‌های متفاوت نمایش نوار برنامه،
‫نوار برنامه مانند سایر کنترل‌های XAML
‫است.

2
00:00:07,384 --> 00:00:11,411
‫اگر فقط یک نوار ابزار را تعریف
‫کنیم که اغلب برنامه‌ها هم به
‫همین شیوه طراحی خواهند شد…

3
00:00:11,711 --> 00:00:14,322
‫قرارداد این است که آن را در
‫پایین صفحه قرار دهیم.

4
00:00:14,485 --> 00:00:17,609
‫HorizontalAlignment آن به Stretch تنظیم شده

5
00:00:17,664 --> 00:00:19,934
‫تا تمام عرض صفحه را پر کند
‫و این چیزی است که ما می‌‫خواهیم.

6
00:00:20,174 --> 00:00:25,181
‫نوار برنامه از کلاسی به نام ContentControl
‫مشتق می‌شود.

7
00:00:25,528 --> 00:00:29,669
‫بسیاری از کنترل‌های دیگر XAML نیز
‫از این کلاس مشتق می‌شوند زیرا
‫خواص مفیدی را ارائه می‌دهد.

8
00:00:30,079 --> 00:00:33,776
‫ContentControl تعداد رفتار مفید را ارائه می‌‫دهد
‫مانند…

9
00:00:33,918 --> 00:00:36,562
‫رفتار کشیدن به داخل نوار برنامه

10
00:00:36,641 --> 00:00:40,335
‫همچنین این عنصر امکان قرار دادن سایر
‫عناصر را داخل خود میسر می‌سازد.

11
00:00:40,502 --> 00:00:45,210
‫محتوا باید تنها یک عنصر باشد اما
‫مشکلی را ایجاد نمی‌کند زیرا می‌‫توان
‫آن را یک پنل تعریف کرد.

12
00:00:45,418 --> 00:00:48,267
‫به این ترتیب می‌توان هر تعداد
‫عنصر فرزند دلخواه را این میان اضافه
‫کرد.

13
00:00:48,415 --> 00:00:52,762
‫در اینجا یک StackPanel افقی را اضافه
‫می کنیم تا بتوان تعدادی دکمه را
‫تعریف کرد.

14
00:00:53,160 --> 00:00:54,904
‫و همچنین آن را راست چین خواهیم ‫کرد.

15
00:00:55,282 --> 00:01:06,114
‫مطابق قواعد برنامه‌های مترو، دکمه‌های ‫نوار برنامه
‫باید در سمت راست قرار ‫گیرند،
‫البته اگر تعداد دکمه‌ها زیاد شد، می‌توان
‫آنها را در طی گروه هایی در هر دو سمت
‫صفحه تعریف کرد.

16
00:01:06,264 --> 00:01:13,131
‫یک دکمه را اضافه می‌کنیم و
‫باید توجه داشت که دکمه‌های نوار
‫برنامه باید یک سری خصوصیات ویژه را
‫داشته باشند.

17
00:01:13,284 --> 00:01:17,620
‫به صورت معمول این دکمه یک آیکون
‫است داخل یک دایره، به همراه متنی زیر آن.

18
00:01:17,754 --> 00:01:25,702
‫برای رسیدن به این مقصود، Sytle دکمه
‫را مساوی یک StaticResource به نام
‫AppBarEditButtonStyle قرار می‌دهیم.

19
00:01:25,799 --> 00:01:32,093
‫و اگر اکنون اندکی طراح ویژوال استودیو
‫را به سمت پایین بلغزانیم، این دکمه
‫نمایان می‌گردد.

20
00:01:32,433 --> 00:01:37,615
‫البته اگر این اعمال را در یک
‫پروژه جدید انجام دهید، این نتیجه را
‫نخواهید گرفت زیرا…

21
00:01:37,797 --> 00:01:39,740
‫باید این پروژه را برای این
‫مقصود آماده ساخت.

22
00:01:40,113 --> 00:01:49,606
‫در پروژه ما یک پوشه جدید به
‫نام Styles و در داخل آن یک
‫فایل XAML به نام AppBarButtonStyle قرار دارد.

23
00:01:49,712 --> 00:01:52,419
‫اجازه دهید تا آن را باز کنیم.

24
00:01:52,538 --> 00:02:02,172
‫هرچند ویژوال استودیو درک کرده است که
‫این فایل محتوای نمایشی ندارد اما هنوز
‫دو سوم صفحه را به قسمت طراح
‫خود اختصاص داده است!

25
00:02:02,544 --> 00:02:07,264
‫برای نمایش فقط قسمت XAML ، دوبار
‫بر روی برگهٔ آن کلیک خواهیم ‫کرد.

26
00:02:07,612 --> 00:02:17,192
‫همانطور که مشاهده می‌کنید این فایل
‫برخلاف یوزرکنترل‌های متداول، در ریشه خود
‫ResourceDictinary را تعریف کرده است.

27
00:02:17,386 --> 00:02:20,440
‫این فایل مجموعه ای از اشیاء مفید ‫است.

28
00:02:20,778 --> 00:02:26,008
‫در اینجا بسیاری از تعاریف مانند رنگ‫های
‫مورد علاقه جهت استفاده در برنامه را
‫می توان قرار داد.

29
00:02:26,274 --> 00:02:29,118
‫و یا قالب‌های بیانگر نحوه نمایش
‫نوع‌های داده ای خاص را در
‫آن می‌توان تعریف کرد.

30
00:02:29,160 --> 00:02:33,006
‫و یا مانند کاری که در اینجا
‫تعریف شده است، می‌توان شیوه نامه‫های
‫مرتبط با کنترل‌ها را قرار ‫داد.

31
00:02:33,233 --> 00:02:42,387
‫اولین شیوه نامه تعریف شده به نام
‫AppBarButtonStyleBase ، یک شیوه نامه
‫عمومی است که قرار است به اشیایی از
‫نوع دکمه اعمال شود.

32
00:02:42,437 --> 00:02:50,094
‫این شیوه نامه یک سری خواص دکمه
‫را از پیش مقدار دهی کرده است
‫بجای اینکه این‌ها را مستقیما در
‫تمام دکمه‌های برنامه اعمال و مقدار ‫دهی کنیم.

33
00:02:50,198 --> 00:02:56,605
‫و به این ترتیب زمان قابل توجهی
‫را حین اعمال یک سری خواص مشخص
‫به چندین کنترل دکمه می‌توان صرفه ‫جویی کرد.

34
00:02:56,761 --> 00:03:06,522
‫برای نمونه شیوه نامه قابل مشاهده، خواص
‫پس زمینه، رنگ، رنگ حاشیه، نام قلم،
‫اندازه قلم و قالب یکسانی را برای
‫کنترل‌های دکمه مورد نظر ارائه می‌‫دهد.

35
00:03:06,868 --> 00:03:14,178
‫اکثر خواص یاد شده واضح هستند اما
‫مورد آخری یعنی قالب، بیشتر جالب توجه است.

36
00:03:14,233 --> 00:03:23,429
‫قالب، ظاهر یک کنترل را تعریف می‌‫کند
‫و عموما تمام کنترل‌ها دارای
‫یک قالب مشخص هستند و این مورد
‫برای یک دکمه بسیار ساده است.

37
00:03:23,762 --> 00:03:27,182
‫این قالب، یک شکل مستطیلی است به
‫همراه مکانی برای قرار دادن عنوان آن.

38
00:03:27,267 --> 00:03:30,121
‫اما من در اینجا پیاده سازی جالب
‫توجهی را ارائه کرده ام.

39
00:03:30,213 --> 00:03:36,224
‫فعلا از قسمت VisualStateManager
‫صرفنظر می‌کنیم زیرا اصل قالب طراحی
‫شده در زیر آن قرار دارد.

40
00:03:36,360 --> 00:03:42,522
‫این StackPanel و محتوای داخل آن، نحوه
‫نمایش دکمه‌های نوار ابزار را مشخص ‫می کنند.

41
00:03:42,667 --> 00:03:46,248
‫بنابراین این بیضی، شکل حلقوی
‫مشاهده شده ‫را تعریف می‌کند.

42
00:03:46,325 --> 00:03:51,909
‫و در ذیل آن، آیکون دکمه
‫به کمک یک TextBlock
‫نمایش داده شده‫است.

43
00:03:51,943 --> 00:03:56,647
‫ویندوز 8 به همراه قلمی به نام
‫Segoe UI Symbol ارائه می‌شود

44
00:03:56,910 --> 00:04:00,591
‫که حاوی بسیاری از آیکون‌های
‫استاندارد ‫است.

45
00:04:00,832 --> 00:04:09,647
‫اگر به جزئیات این قلم دقت کنیم،
‫آیکون‌های مورد نظر از بازه خصوصی
‫شروع شده از شماره 0xE000
‫تعریف شده‫اند.

46
00:04:09,781 --> 00:04:14,336
‫برای مثال در اینجا آیکون قلم را
‫که عموما جهت ویرایش اطلاعات مورد استفاده
‫قرار می‌گیرد را مشاهده می‌کنید.

47
00:04:14,404 --> 00:04:21,658
‫مزیت استفاده از قلم در اینجا، برداری
‫بودن آیکون‌های آن است که می‌‫تواند
‫در اندازه‌های صفحه متفاوت به
‫خوبی تغییر ابعاد دهد.

48
00:04:21,840 --> 00:04:27,038
‫انجام اینکار با استفاده از امکانات گرافیکی
‫XAML هم میسر بود اما استفاده از
‫قلم در اینجا ساده‌تر است.

49
00:04:27,387 --> 00:04:34,760
‫در این شیوه نامه، TextBlock متن آیکون
‫مورد نظر را از خاصیتی به نام Tag
‫دریافت می‌کند.

50
00:04:35,066 --> 00:04:45,599
‫Tag یک خاصیت همگانی و غالبا بدون
‫استفاده است که از آن استفاده شده،
‫زیرا از خاصیت Content جهت نمایش
‫عنوان اصلی دکمه بهره خواهیم جست.

51
00:04:45,683 --> 00:04:47,957
‫که در اینجا قابل مشاهده است.

52
00:04:48,191 --> 00:04:52,891
‫بنابراین این سه عنصر، شکل ظاهر دکمه
‫را تعریف می‌کنند؛ دایره، آیکون و
‫متن عنوان آن.

53
00:04:53,240 --> 00:04:55,867
‫خوب تکلیف این VisualStateManager
‫تعریف شده در بالا چیست؟

54
00:04:56,238 --> 00:05:01,954
‫به کمک آن نحوه تغییرات ظاهری یک
‫کنترل را با تغییرات حالت می‌توان
‫تنظیم کرد.

55
00:05:02,211 --> 00:05:06,361
‫برای مثال این تعاریف سبب درخشش دکمه
‫در حین فشرده شدن آن می‌شوند.

56
00:05:06,437 --> 00:05:11,295
‫البته در صفحه اصلی، از این شیوه
‫نامه به صورت مستقیم استفاده نشده است

57
00:05:11,456 --> 00:05:13,943
‫و از عنصری به نام AppBarEditButtonStyle
‫استفاده گردیده است.

58
00:05:14,350 --> 00:05:17,059
‫که کمی پایین‌تر در فایل شیوه
‫نامه ما تعریف شده است

59
00:05:17,165 --> 00:05:21,098
‫و همانطور که مشاهده می‌کنید این
‫شیوه نامه بر اساس شیوه نامه ای
‫که تاکنون توضیحات آن ارائه شد، تعریف
‫گردیده است.

60
00:05:21,127 --> 00:05:34,281
‫در این شیوه نامه جدید، خواص Tag
‫و Content جهت نمایش آیکون به کمک
‫قلم یاده شده و متن ‫عنوان دکمه،
‫مقدار دهی شده اند.

61
00:05:34,282 --> 00:05:37,704
‫و به همین ترتیب شیوه نامه‌های ‫
‫مشابهی را برای سایر دکمه‌ها در
‫اینجا می‌توان مشاهده کرد.

62
00:05:38,081 --> 00:05:41,742
‫اکنون اگر به صفحه اصلی برنامه برگردیم،
‫می توان دکمهٔ دیگری را افزود.

63
00:05:41,769 --> 00:05:47,347
‫برای مثال به کمک شیوه نامه AppBarAddButtonStyle
‫که در فایل ResourceDictionary ما تعریف شده
‫است.

64
00:05:47,407 --> 00:05:59,236
‫پاسخگویی به رخداد کلیک این دکمه‌ها ‫هم
‫بسیار ساده است و تنها کافی
‫است رخدادگردان Click آن را تعریف کرده
‫و دکمه tab را فشار دهیم تا
‫ویژوال استودیو روال رخدادگردان آن را به
‫صورت خودکار در فایل Code behind تعریف ‫کند.

65
00:05:59,455 --> 00:06:02,362
‫و سپس هر کار لازمی را در
‫آنجا می‌توان انجام داد و تعریف ‫کرد.

66
00:06:02,462 --> 00:06:06,730
‫در اینجا یک کار دیگر را نیز
‫نیاز داریم تا در فایل XAML جاری
‫انجام دهیم.

67
00:06:06,830 --> 00:06:10,130
‫باید تصمیم گیری کنیم که چگونه قرار
‫است این نوار برنامه ناپدید شود.

68
00:06:10,244 --> 00:06:13,401
‫خاصیت DismissMode سه گزینه را ارائه می‌‫دهد.

69
00:06:13,678 --> 00:06:18,329
‫EdgeSwipe به این معنا است که نمایان باش تا
‫زمانیکه که کاربر انگشت خود را به خارج کشیده است

70
00:06:18,330 --> 00:06:21,934
‫TimeDelay به معنای عاقبت محو شدن
‫نوار برنامه است.

71
00:06:22,160 --> 00:06:25,040
‫و حالت مرجح در اینجا LightDismiss است.

72
00:06:25,269 --> 00:06:29,183
‫به این ترتیب به محض کلیک کاربر
‫در جایی دیگر، سبب محو نوار برنامه
‫خواهد شد.

73
00:06:29,323 --> 00:06:35,651
‫تنها زمانی از این حالت استفاده نمی‌کنیم‫
‫که نوار برنامه را باید برای مدتی ‫باز نگه داشت.

74
00:06:36,068 --> 00:06:39,425
‫خوب، برنامه را اجرا می‌کنیم…

75
00:06:39,613 --> 00:06:44,286
‫و اکنون اگر از پایین صفحه انگشت خود
‫را به خارج بکشیم

76
00:06:44,550 --> 00:06:45,610
‫نوار برنامه ظاهر می‌شود.

77
00:06:46,013 --> 00:06:49,702
‫نوار برنامه به صورت خودکار پویانمایی
‫مشاهده ‫شده را مدیریت می‌کند.

78
00:06:49,934 --> 00:06:59,600
‫اگر روی یکی از دکمه‌ها کلیک
‫کنیم، روال رخدادگران مرتبط آن اجرا شده
‫و اگر جایی دیگر در صفحه کلیک
‫نمائیم، این نوار محو خواهد شد.

